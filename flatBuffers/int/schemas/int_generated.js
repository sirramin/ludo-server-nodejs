// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Mench = Mench || {};

/**
 * @const
 * @namespace
 */
Mench.Number = Mench.Number || {};

/**
 * @constructor
 */
Mench.Number.Integ = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Mench.Number.Integ}
 */
Mench.Number.Integ.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.Number.Integ=} obj
 * @returns {Mench.Number.Integ}
 */
Mench.Number.Integ.getRootAsInteg = function(bb, obj) {
  return (obj || new Mench.Number.Integ).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.Number.Integ=} obj
 * @returns {Mench.Number.Integ}
 */
Mench.Number.Integ.getSizePrefixedRootAsInteg = function(bb, obj) {
  return (obj || new Mench.Number.Integ).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Mench.Number.Integ.prototype.data = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Mench.Number.Integ.startInteg = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} data
 */
Mench.Number.Integ.addData = function(builder, data) {
  builder.addFieldInt16(0, data, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Mench.Number.Integ.endInteg = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Mench.Number.Integ.finishIntegBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Mench.Number.Integ.finishSizePrefixedIntegBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} data
 * @returns {flatbuffers.Offset}
 */
Mench.Number.Integ.createInteg = function(builder, data) {
  Mench.Number.Integ.startInteg(builder);
  Mench.Number.Integ.addData(builder, data);
  return Mench.Number.Integ.endInteg(builder);
}

// Exports for Node.js and RequireJS
this.Mench = Mench;
