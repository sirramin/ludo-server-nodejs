// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Mench = Mench || {};

/**
 * @const
 * @namespace
 */
Mench.Arrs = Mench.Arrs || {};

/**
 * @constructor
 */
Mench.Arrs.Arr = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Mench.Arrs.Arr}
 */
Mench.Arrs.Arr.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.Arrs.Arr=} obj
 * @returns {Mench.Arrs.Arr}
 */
Mench.Arrs.Arr.getRootAsArr = function(bb, obj) {
  return (obj || new Mench.Arrs.Arr).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.Arrs.Arr=} obj
 * @returns {Mench.Arrs.Arr}
 */
Mench.Arrs.Arr.getSizePrefixedRootAsArr = function(bb, obj) {
  return (obj || new Mench.Arrs.Arr).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
Mench.Arrs.Arr.prototype.data = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb.__vector(this.bb_pos + offset) + index * 2) : 0;
};

/**
 * @returns {number}
 */
Mench.Arrs.Arr.prototype.dataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint16Array}
 */
Mench.Arrs.Arr.prototype.dataArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Uint16Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Mench.Arrs.Arr.startArr = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
Mench.Arrs.Arr.addData = function(builder, dataOffset) {
  builder.addFieldOffset(0, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
Mench.Arrs.Arr.createDataVector = function(builder, data) {
  builder.startVector(2, data.length, 2);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Mench.Arrs.Arr.startDataVector = function(builder, numElems) {
  builder.startVector(2, numElems, 2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Mench.Arrs.Arr.endArr = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Mench.Arrs.Arr.finishArrBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Mench.Arrs.Arr.finishSizePrefixedArrBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 * @returns {flatbuffers.Offset}
 */
Mench.Arrs.Arr.createArr = function(builder, dataOffset) {
  Mench.Arrs.Arr.startArr(builder);
  Mench.Arrs.Arr.addData(builder, dataOffset);
  return Mench.Arrs.Arr.endArr(builder);
}

// Exports for Node.js and RequireJS
this.Mench = Mench;
