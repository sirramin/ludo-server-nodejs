// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Mench = Mench || {};

/**
 * @const
 * @namespace
 */
Mench.pos = Mench.pos || {};

/**
 * @constructor
 */
Mench.pos.Position = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Mench.pos.Position}
 */
Mench.pos.Position.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.pos.Position=} obj
 * @returns {Mench.pos.Position}
 */
Mench.pos.Position.getRootAsPosition = function(bb, obj) {
  return (obj || new Mench.pos.Position).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.pos.Position=} obj
 * @returns {Mench.pos.Position}
 */
Mench.pos.Position.getSizePrefixedRootAsPosition = function(bb, obj) {
  return (obj || new Mench.pos.Position).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Mench.pos.Position.prototype.player = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Mench.pos.Position.prototype.userId = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Mench.pos.Position.prototype.username = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Mench.pos.Position.startPosition = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} player
 */
Mench.pos.Position.addPlayer = function(builder, player) {
  builder.addFieldInt16(0, player, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} userIdOffset
 */
Mench.pos.Position.addUserId = function(builder, userIdOffset) {
  builder.addFieldOffset(1, userIdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} usernameOffset
 */
Mench.pos.Position.addUsername = function(builder, usernameOffset) {
  builder.addFieldOffset(2, usernameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Mench.pos.Position.endPosition = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} player
 * @param {flatbuffers.Offset} userIdOffset
 * @param {flatbuffers.Offset} usernameOffset
 * @returns {flatbuffers.Offset}
 */
Mench.pos.Position.createPosition = function(builder, player, userIdOffset, usernameOffset) {
  Mench.pos.Position.startPosition(builder);
  Mench.pos.Position.addPlayer(builder, player);
  Mench.pos.Position.addUserId(builder, userIdOffset);
  Mench.pos.Position.addUsername(builder, usernameOffset);
  return Mench.pos.Position.endPosition(builder);
}

/**
 * @constructor
 */
Mench.pos.Positions = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Mench.pos.Positions}
 */
Mench.pos.Positions.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.pos.Positions=} obj
 * @returns {Mench.pos.Positions}
 */
Mench.pos.Positions.getRootAsPositions = function(bb, obj) {
  return (obj || new Mench.pos.Positions).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Mench.pos.Positions=} obj
 * @returns {Mench.pos.Positions}
 */
Mench.pos.Positions.getSizePrefixedRootAsPositions = function(bb, obj) {
  return (obj || new Mench.pos.Positions).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {Mench.pos.Positions=} obj
 * @returns {Mench.pos.Positions}
 */
Mench.pos.Positions.prototype.data = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Mench.pos.Positions).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Mench.pos.Positions.prototype.dataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Mench.pos.Positions.startPositions = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
Mench.pos.Positions.addData = function(builder, dataOffset) {
  builder.addFieldOffset(0, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Mench.pos.Positions.createDataVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Mench.pos.Positions.startDataVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Mench.pos.Positions.endPositions = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Mench.pos.Positions.finishPositionsBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Mench.pos.Positions.finishSizePrefixedPositionsBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 * @returns {flatbuffers.Offset}
 */
Mench.pos.Positions.createPositions = function(builder, dataOffset) {
  Mench.pos.Positions.startPositions(builder);
  Mench.pos.Positions.addData(builder, dataOffset);
  return Mench.pos.Positions.endPositions(builder);
}

// Exports for Node.js and RequireJS
this.Mench = Mench;
