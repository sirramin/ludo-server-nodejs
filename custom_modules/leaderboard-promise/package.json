{
  "_from": "leaderboard-promise",
  "_id": "leaderboard-promise@1.1.0",
  "_inBundle": false,
  "_integrity": "sha1-/TDPLCxDo0gK8WknPSxxZS63YTM=",
  "_location": "/leaderboard-promise",
  "_npmUser": {
    "email": "zen_zhao@qq.com",
    "name": "ZhaoTianze"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {
    "double-ended-queue": "2.1.0-0",
    "redis-commands": "1.3.5"
  },
  "_requested": {
    "escapedName": "leaderboard-promise",
    "fetchSpec": "latest",
    "name": "leaderboard-promise",
    "raw": "leaderboard-promise",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/leaderboard-promise/-/leaderboard-promise-1.1.0.tgz",
  "_shasum": "fd30cf2c2c43a3480af169273d2c71652eb76133",
  "_spec": "leaderboard-promise",
  "_where": "D:\\Projects\\menchman\\menchman-backend",
  "author": {
    "email": "zen_zhao@qq.com",
    "name": "ZhaoTianze"
  },
  "bugs": {
    "url": "https://github.com/ZhaoTianze/leaderboard-promise/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bluebird": "^3.3.5",
    "redis": "2.5.0-1"
  },
  "deprecated": false,
  "description": "Leaderboards backed by Redis in Node.js, basic on promise",
  "devDependencies": {
    "async": "0.1.22",
    "mocha": "1.5.0"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/ZhaoTianze/leaderboard-promise#readme",
  "keywords": [
    "leaderboard",
    "redis"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ZhaoTianze",
      "email": "zen_zhao@qq.com"
    }
  ],
  "name": "leaderboard-promise",
  "optionalDependencies": {},
  "readme": "Leaderboard\n-----------\n\nLeaderboard backed by [Redis](http://redis.io) in Node.js, basic on Promise. \n\nhttps://www.npmjs.com/package/leaderboard-promise\n\nInstallation\n------------\n\n    $ npm install leaderboard-promise\n\nAPI\n---\n\n#Constructor\n\n  var lb = new Leaderboard('name', [options], [redisOptions|redisClient])\n\nCreates a new leaderboard or attaches to an existing leaderboard.\n\n###Options\n\n  - `pageSize` - default: `50`\n\n    Page size to be used when paging through the leaderboard.\n\n  - `reverse` - default: `false`\n\n    If `true` various methods will return results in lowest-to-highest order.\n\n##Methods\n\n  - `add(member, score)`\n\n    Ranks a member in the leaderboard.\n\n        lb.add('member', 100).then(function(){\n          // completed, do something\n        }).catch(function(error){\n          //failed\n        });\n\n  - `incr(member, score)`\n\n    Increments the score of a member by provided score and ranks it in the leaderboard. Decrements if negative.\n\n        lb.incr('member', 2).then(function(){\n          // completed, do something\n        }).catch(function(error){\n          //failed\n        });\n    now the score to the member would be 102.\n\n  - `highest(member,score)`\n\n    Set a member`s highest score by provided score and ranks it in the leaderboard. If new score is less than old score in the leaderboard, it will keep the old scores.  \n\n      lb.highest('member',103).then(function(){\n        // completed, do something\n      }).catch(function(error){\n        //failed\n      });\n      now the score to the member would be 103.\n  - `rank(member)`\n\n    Retrieves the rank for a member in the leaderboard.\n\n        lb.rank('member').then(function(rank){\n          // rank - current position, -1 if a member doesn't\n        }).catch(function(error){\n          //failed\n        });\n\n  - `score(member)`\n\n    Retrieves the score for a member in the leaderboard.\n\n        lb.score('member').then(function(score){\n           // score - current score, -1 if a member doesn't\n        }).catch(function(error){\n          //failed\n        });\n\n  - `list([page])`\n\n    Retrieves a page of leaders from the leaderboard.\n\n        lb.list().then(function(list) {\n          // list - list of leaders are ordered from\n          // the highest to the lowest score\n          // [\n          //   {member: 'member1', score: 30},\n          //   {member: 'member2', score: 20},\n          //   {member: 'member3', score: 10}\n          // ]\n        });\n\n  - `at(rank)`\n\n    Retrieves a member on the spicified ranks.\n\n        lb.at(2).then(function(member) {\n          // member - member at the specified rank i.e who has 2nd rank,\n          // null if a member is not found\n          // {\n          //   member: 'member1',\n          //   score: 30\n          // }\n        });\n\n  - `rm(member)`\n\n    Removes a member from the leaderboard.\n\n        lb.rm('member').then(function(removed) {\n          // removed - false in case the removing member \n          // doesn't exist in the leaderboard.\n          // true - successful remove\n        });\n\n  - `total()`\n\n    Retrieves the total number of members in the leaderboard.\n\n        lb.total().then(function(number) {\n          // captain obvious\n        });\n\n  - `numberInScoreRange(min,max)`\n\n    Returns the number of members in the leaderboard with a score between min and max.\n\n    lb.numberInScoreRange(10,100).then(function(number){\n      // number - the number of members\n    });\n\n  - `membersInRankRange(beginRank,endRank)`\n\n    Returns the list of members in the leaderboard between beginRank and endRank.\n\n    lb.membersInRankRange(10,100).then(function(list){\n      // list - the list of members\n    });\n\n## License \n\n[MIT](http://en.wikipedia.org/wiki/MIT_License#License_terms). Copyright (c) 2015 zhaotianze &lt;zen_zhao@qq.com&gt;\n\n#### Author: [zhaotianze](https://github.com/ZhaoTianze/leaderboard-promise)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ZhaoTianze/leaderboard-promise.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "version": "1.1.0"
}
